//WEGSCD$  JOB (DOUG,5278),COMPILE.SMF.TEST,CLASS=A,MSGCLASS=X,
//             MSGLEVEL=(1,0),COND=(9,LT)
//        EXEC PL1LFCL,REGION.PL1L=256K,
//* PARM.PL1L='N=PLISMFT,ATR,M,XREF,NS2,SIZE=999999,LC=60,SM=(2,72,1)',
//  PARM.PL1L='N=PLISMFT,M,NS2,SIZE=999999,LC=60,SM=(2,72,1)',
//  PARM.LKED='NOXREF,LIST'
//PL1L.SYSPRINT DD SYSOUT=*
//PL1L.SYSLIB DD DSN=WEGSCD.PLISMF.SRC,DISP=SHR
//PL1L.SYSIN DD *
 SMFTEST: PROC(PARM_STRING) OPTIONS(MAIN);

 %INCLUDE DOTH;
 %INCLUDE PTRADD;
 %INCLUDE PTRDIFF;

 DCL   PARM_STRING CHAR(100) VARYING;
 DCL   PARM_STRING_COPY CHAR(100) VARYING;
 DCL   PARM_NUMBER (0:74) CHAR (2) VARYING INIT
          ('0','1','2','3','4','5','6',
           '7','8','9','10','11','12','13','14','15','16','17','18',
          '19','20','21','22','23','24','25','26','27','28','29','30',
          '31','32','33','34','35','36','37','38','39','40','41','42',
          '43','44','45','46','47','48','49','50','51','52','53','54',
          '55','56','57','58','59','60','61','62','63','64','65','66',
          '67','68','69','70','71','72','73','74');
    /*   THIS TABLE CONTAINS ALL OF THE RECORD TYPES ACCEPTED BY     */
    /*    THIS PROGRAM                                               */

 DCL   START FIXED BINARY (15,0),  /* PARAMETER STRING POINTER       */

       PARM_LENGTH FIXED BINARY (15,0),  /* LENGTH OF PARAMETER      */

       VALUE CHAR (3) VARYING,            /* PARAMETER ITEM -  THIS
          LENGTH SHOULD BE 1 MORE THAN THE LENGTH OF PARM_LENGTH
          TO PROTECT AGAINST TRUNCATION MATCHES  */

       PLACE FIXED BINARY (15,0),  /* POSITION VALUE RETURNED FROM
           THE BUILT-IN FUNCTION INDEX  */

       TYPE_TABLE (0:74) BIT(1);               /*  THIS TABLE CONTAINS
           SWITCHES FOR EACH OF THE RECORD TYPES.  A VALUE OF ONE
           INDICATES THAT TYPE IS TO BE PROCESSED AND A VALUE OF ZERO
           INDICATES THAT TYPE IS TO BE IGNORED.  */

 DCL   SMFDATA                   INPUT RECORD;
 DCL   EOF_SMF                   BIT(1)        INIT('0'B);

 DCL   RECORDS_READ              FIXED DEC(9)  INIT(0);
 DCL   RECORDS_SEL               FIXED DEC(9)  INIT(0);

 DCL   SYSPRINT                  PRINT;

 DCL   REPORT                    PRINT;

 DCL   SMFP POINTER;

 DCL 1 SMF BASED(SMFP),
 %INCLUDE SMFXX;

 DCL   RECORD_TYPE               BIT(8);
1PARM_LENGTH = LENGTH(PARM_STRING);
 PARM_STRING_COPY = PARM_STRING;
 PUT FILE(SYSPRINT) SKIP DATA(PARM_STRING_COPY, PARM_LENGTH);

 IF PARM_LENGTH = 0  THEN            /* TEST FOR NULL PARAMETER   */
                                     /* IF NULL, PROCESS ALL TYPES*/
   DO I = 0 TO 74;                                      /* Y02120 */
     TYPE_TABLE(I) = '1'B;           /*       SET TYPE SWITCH ON  */
   END;                              /* END FOR DO I = 74         */
 ELSE                                /* IF TYPE PARAMETER VALUES  */
   DO;                               /* PRESENT, SET SELECT SWITCH*/
     START = 1;                      /* SET PARAMETER POINTER     */
     DO WHILE (START ^> PARM_LENGTH); /* SET LOOP FOR STRING      */
       PLACE = INDEX(SUBSTR(PARM_STRING,START),',');
                                     /* SEARCH PARAMETER FOR COMMA*/
       IF PLACE ^= 0  THEN           /* TEST FOR END OF PARAMETER */
                                     /* IF NOT THE END THEN       */
         DO;                         /* PROCESS CURRENT VALUE     */
                                     /* EXTRACT TYPE VALUE        */
           VALUE = SUBSTR(PARM_STRING,START,PLACE-1);
           START = START + PLACE;    /* INCREMENT POINTER         */
         END;                        /* END OF DO FOR PLACE ^= 0  */
       ELSE                          /* IF END OF PARAMETER       */
         DO;                         /* PROCESS LAST VALUE        */
           VALUE = SUBSTR(PARM_STRING,START);
           START = PARM_LENGTH + 1;  /* SET LOOP TO END           */
         END;                        /* END OF DO FOR PLACE = 0   */
                                                           /* Y02120 */
       PUT FILE(SYSPRINT) SKIP DATA(VALUE);
       DO I = 0 TO 74;               /* SET TYPE_TABLE LOOP       */
         IF VALUE = PARM_NUMBER(I) THEN /* SEARCH FOR VALUE       */
                                     /* IF VALUE FOUND            */
           TYPE_TABLE(I) = '1'B;     /* SET TYPE SWITCH           */
   END;                              /* END OF DO FOR LENGTH ^= 0 */
 PUT FILE(SYSPRINT) SKIP DATA(TYPE_TABLE);
1ON ENDFILE(SMFDATA)  EOF_SMF='1'B;

 OPEN FILE(REPORT) OUTPUT STREAM LINESIZE(132);

 READ FILE(SMFDATA) SET(SMFP);
 DO WHILE(^EOF_SMF);

   RECORDS_READ=RECORDS_READ+1;

   RECORD_TYPE = SMF.SMFXRTY;
   IF RECORD_TYPE > 74 THEN
     GO TO LOOP;
   ELSE;
     IF TYPE_TABLE(RECORD_TYPE) = 0 THEN /* TEST TYPE SWITCH         */
       GOTO LOOP;                           /* SKIP THIS RECORD      */

   IF (RECORD_TYPE = 0) THEN DO;
     CALL IPL;
     END;
   IF (RECORD_TYPE = 4) THEN DO;
     CALL STEPTERM;
     END;
   IF (RECORD_TYPE = 5) THEN DO;
     CALL JOBTERM;
     END;
   /* SMF TYPE 20S MAY BE DIRTY IF FROM TSO (BAD PROGRAMMER FIELD) */
   IF (RECORD_TYPE = 20) THEN DO;
     CALL JOBINIT;
     END;
   IF (RECORD_TYPE = 26) THEN DO;
     CALL JES2JOBPURGE;
     END;
   IF (RECORD_TYPE = 34) THEN DO;
     CALL TSTERM;
     END;
   IF (RECORD_TYPE = 70) THEN DO;
     CALL HANDLE70;
     END;

   LOOP: READ FILE(SMFDATA) SET(SMFP);

   END; /* DO WHILE */

 PUT FILE(SYSPRINT) SKIP(2) EDIT(RECORDS_READ,' SMF RECORDS READ')
                 (P'ZZZ,ZZZ,ZZ9',A);
 PUT FILE(SYSPRINT) SKIP(1) EDIT(RECORDS_SEL, ' SMF RECORDS SELECTED')
                 (P'ZZZ,ZZZ,ZZ9',A);

 RETURN;
1/********************************************************************/
 /*      P R O C E S S   S M F   R E C O R D S                       */
 /********************************************************************/

 /*-------------------------------*/
 /* PROCESS IPL EVENT             */
 /*-------------------------------*/
 IPL: PROC;
   DCL 1 SMF00 UNALIGNED BASED(SMFP),
 %INCLUDE SMF00;

   /* A NON-BASED COPY SO THAT PUT DATA() WORKS */
   DCL 1 P0 LIKE SMF00;

   P0 = SMF00;

   PUT FILE(REPORT) SKIP EDIT(' ') (A);
   PUT FILE(REPORT) SKIP DATA(P0);

   RECORDS_SEL = RECORDS_SEL + 1;
 END IPL;

 /*-------------------------------*/
 /* PROCESS STEP TERMINATION      */
 /*-------------------------------*/
 STEPTERM: PROC;
   DCL 1 SMF04 UNALIGNED BASED(SMFP),
 %INCLUDE SMF04;

   /* A NON-BASED COPY SO THAT PUT DATA() WORKS */
   DCL 1 P4 LIKE SMF04;

   DCL 1 SMF04ACCT UNALIGNED BASED(SMF4ACCTP),
 %INCLUDE SMF04ACC;
   /* A NON-BASED COPY SO THAT PUT DATA() WORKS */
   DCL 1 P4ACCT LIKE SMF04ACCT;

   DCL P_OFFSET FIXED BIN(31);

   P_OFFSET = PTRDIFF(SMFP, ADDR(SMF04.SMF4LENN));
   P_OFFSET = P_OFFSET + SMF04.SMF4LENN;
   SMF4ACCTP = PTRADD (SMFP, P_OFFSET);

   P4 = SMF04;
   PUT FILE(REPORT) SKIP EDIT(' ') (A);
   PUT FILE(REPORT) SKIP DATA(P4);

   P4ACCT = SMF04ACCT;
   PUT FILE(REPORT) SKIP DATA(P4ACCT);

   RECORDS_SEL = RECORDS_SEL + 1;
 END STEPTERM;

 JOBTERM: PROC;
   DCL 1 SMF05 UNALIGNED BASED(SMFP),
 %INCLUDE SMF05;
   /* A NON-BASED COPY SO THAT PUT DATA() WORKS */
   DCL 1 P5 LIKE SMF05;

   P5 = SMF05;

   PUT FILE(REPORT) SKIP EDIT(' ') (A);
   PUT FILE(REPORT) SKIP DATA(P5);

   RECORDS_SEL = RECORDS_SEL + 1;
 END JOBTERM;

 JOBINIT: PROC;
   DCL 1 SMF20 UNALIGNED BASED(SMFP),
 %INCLUDE SMF20;

   /* A NON-BASED COPY SO THAT PUT DATA() WORKS */
   DCL 1 P20 LIKE SMF20;

   P20 = SMF20;

   PUT FILE(REPORT) SKIP EDIT(' ') (A);
   PUT FILE(REPORT) SKIP DATA(P20);

   RECORDS_SEL = RECORDS_SEL + 1;
 END JOBINIT;

 JES2JOBPURGE: PROC;
   DCL 1 SMF26 UNALIGNED BASED(SMFP),
 %INCLUDE SMF26;

   /* A NON-BASED COPY SO THAT PUT DATA() WORKS */
   DCL 1 P26 LIKE SMF26;

   DCL SMF26EVTP POINTER;

   DCL 1 SMF26EVENTS UNALIGNED BASED(SMF26EVTP),
 %INCLUDE SMF26EVT;

   /* A NON-BASED COPY SO THAT PUT DATA() WORKS */
   DCL 1 P26EVENTS LIKE SMF26EVENTS;

   DCL SMF26ACTP POINTER;

   DCL 1 SMF26ACTUALS UNALIGNED BASED(SMF26ACTP),
 %INCLUDE SMF26ACT;

   /* A NON-BASED COPY SO THAT PUT DATA() WORKS */
   DCL 1 P26ACTUALS LIKE SMF26ACTUALS;

   DCL P_OFFSET FIXED BIN(31);

   P_OFFSET = PTRDIFF(SMFP, ADDR(SMF26.SMF26LN1));
   P_OFFSET = P_OFFSET + SMF26.SMF26LN1;
   SMF26EVTP = PTRADD(SMFP, P_OFFSET);
   P_OFFSET = P_OFFSET + SMF26EVENTS.SMF26LN2;
   SMF26ACTP = PTRADD(SMFP, P_OFFSET);

   P26 = SMF26;
   PUT FILE(REPORT) SKIP EDIT(' ') (A);
   PUT FILE(REPORT) SKIP DATA(P26);

   P26EVENTS = SMF26EVENTS;

   PUT FILE(REPORT) SKIP EDIT(' ') (A);
   PUT FILE(REPORT) SKIP DATA(P26EVENTS);

   P26ACTUALS = SMF26ACTUALS;

   PUT FILE(REPORT) SKIP EDIT(' ') (A);
   PUT FILE(REPORT) SKIP DATA(P26ACTUALS);

   RECORDS_SEL = RECORDS_SEL + 1;
 END JES2JOBPURGE;

 TSTERM: PROC;
   DCL 1 SMF34 UNALIGNED BASED(SMFP),
 %INCLUDE SMF34;

   /* A NON-BASED COPY SO THAT PUT DATA() WORKS */
   DCL 1 P34 LIKE SMF34;

   P34 = SMF34;

   PUT FILE(REPORT) SKIP EDIT(' ') (A);
   PUT FILE(REPORT) SKIP DATA(P34);

   RECORDS_SEL = RECORDS_SEL + 1;
 END TSTERM;
 %INCLUDE MF1TIME;
 HANDLE70: PROC;
   DCL 1 SMF70 UNALIGNED BASED(SMFP),
 %INCLUDE SMF70;

   /* A NON-BASED COPY SO THAT PUT DATA() WORKS */
   DCL 1 P70 LIKE SMF70;

   DCL SMF70CPUDATA_P POINTER;
   DCL 1 SMF70CPUDATA UNALIGNED BASED(SMF70CPUDATA_P),
 %INCLUDE SMF70CPU;

   DCL 1 P70CPUDATA LIKE SMF70CPUDATA;

   DCL P_OFFSET FIXED BIN(31);

   DCL (CPUWAIT,INREADY,OUTREADY,TOTIN,TOTTSO,TOTBATCH,
       TOTSTC,OUTWAIT)       FLOAT DEC(6),
      (INTERVAL_LENGTH,WAIT_SECONDS,TOTAL_WAIT_SECONDS) FLOAT DEC(16),
       FLOATX FLOAT DEC(16) INIT(4.294967296E9),  /*2.0E0**32 */
       FLOATC FLOAT DEC(16) INIT(4.096E9),  /* (2.E0**12)*(1.E6) */
       NDUM FIXED BIN(31),
      (MOD,TRUNC,FLOAT) BUILTIN;

   P70 = SMF70;

   P_OFFSET = PTRDIFF(SMFP, ADDR(SMF70.SMF70SCC));
   P_OFFSET = P_OFFSET + SMF70.SMF70SCC;

   PUT FILE(REPORT) SKIP EDIT(' ') (A);
   PUT FILE(REPORT) SKIP DATA(P70);

   TOTAL_WAIT_SECONDS = 0;
   /* GET INTERVAL TIME IN SECONDS - DOUBLE PRECISION - MMSSTTTF */
   INTERVAL_LENGTH = TRUNC(SMF70.SMF70INT/1.0E5) * 60
            + MOD(SMF70.SMF70INT,1.0E5) / 1.0E3;

   DO I = 1 TO SMF70.SMF70CPU;
     PUT FILE(REPORT) SKIP DATA(P_OFFSET);

     SMF70CPUDATA_P = PTRADD (SMFP, P_OFFSET);
     P70CPUDATA = SMF70CPUDATA;
     PUT FILE(REPORT) SKIP DATA(P70CPUDATA);

     WAIT_SECONDS = SMF70CPUDATA.SMF70WAT;
     WAIT_SECONDS = WAIT_SECONDS / FLOATC;
     TOTAL_WAIT_SECONDS = TOTAL_WAIT_SECONDS + WAIT_SECONDS;

     CPUWAIT = WAIT_SECONDS / INTERVAL_LENGTH;
     PUT FILE(REPORT) SKIP
       DATA(WAIT_SECONDS, INTERVAL_LENGTH, CPUWAIT);

     P_OFFSET = P_OFFSET + SMF70.SMF70SCD;
   END;

   /* TAKE AVERAGE OF CPU(S) */
   CPUWAIT = TOTAL_WAIT_SECONDS /
     (INTERVAL_LENGTH * SMF70.SMF70CPU);
   PUT FILE(REPORT) SKIP
     DATA(TOTAL_WAIT_SECONDS, INTERVAL_LENGTH, CPUWAIT);

   CALL CALCMF1TIME(SMFP);

   RECORDS_SEL = RECORDS_SEL + 1;
 END HANDLE70;
 END SMFTEST;
/*
//LKED.SYSLIB  DD DSN=SYSC.PL1LIB,DISP=SHR
//             DD DSN=SYSC.LINKLIB,DISP=SHR
//LKED.SYSLMOD DD DSN=WEGSCD.PLISMF.LOADLIB,DISP=OLD
//LKED.SYSPRINT DD SYSOUT=*
//GO      EXEC PGM=PLISMFT,
//             PARM='70'
//STEPLIB   DD DSN=WEGSCD.PLISMF.LOADLIB,DISP=SHR
//SYSPRINT  DD SYSOUT=*
//REPORT    DD SYSOUT=*,DCB=(RECFM=FA,LRECL=133)
//*MFDATA   DD DSN=SMF.DAILY.DATA(0),DISP=(OLD,PASS)
//SMFDATA   DD DSN=WEGSCD.SMF,DISP=(OLD,PASS)
//*MFDATA   DD DSN=SYS1.MANY,DISP=SHR
