         TITLE 'Y2KATOG - REBUILD GREGORIAN DATE FROM ASTRO NUMBER'
*                                                                     *
*   YY   YY   222   KK   KK    A   TTTTTTTT  OOOOO   GGGGG            *
*   YY   YY  2   2  KK  KK    AAA     TT    OO   OO GG   GG           *
*   YY   YY      2  KK KK    AA AA    TT    OO   OO GG   GG           *
*    YY YY       2  KKKK    AA   AA   TT    OO   OO GG                *
*     YYY     222   KKKK    AA   AA   TT    OO   OO GG  GGG           *
*     YY     2      KK KK   AAAAAAA   TT    OO   OO GG   GG           *
*     YY     2      KK  KK  AA   AA   TT    OO   OO GG   GG           *
*     YY     22222  KK   KK AA   AA   TT     OOOOO   GGGGG            *
*                                                                     *
* ******************************************************************* *
* ******************************************************************* *
*    THIS SUBROUTINE REBUILDS THE GREGORIAN DATE (MMDDYYYY) FOR       *
*    A GIVEN ASTRONOMICAL NUMBER                                      *
*                                                                     *
*    1.  VALID ASTRONOMICAL NUMBERS FOR THIS ROUTINE ARE 2305814+     *
*        THROUGH 2962884+ (INCLUSIVE)                                 *
*                                                                     *
*    2.  THREE FIELDS ARE PASSED AS PARAMETERS TO THE ROUTINE:        *
*        1)  A 7 BYTE FIELD CONTAINING THE ASTRONOMICAL NUMBER        *
*            (IN ZONED-DECIMAL FORMAT) TO BE PROCESSED,               *
*        2)  A 1 BYTE ZONED-DECIMAL RETURN CODE, AND                  *
*        3)  AN 8 BYTE FIELD WHICH WILL RECEIVE THE OUTPUT DATE       *
*            (IN ZONED-DECIMAL FORMAT).                               *
*        THE ROUTINE WILL NOT ALTER THE ASTRONOMICAL NUMBER PASSED    *
*        TO IT.                                                       *
*                                                                     *
*        SUGGESTED CALLING SYNTAX FOR ALC CALLERS:                    *
*                                                                     *
*                      CALL  Y2KATOG,(ANUM)                           *
*                         . . .                                       *
*             ANUM     DS    ZL7'2451544'                             *
*             RC       DS    ZL1'0'                                   *
*             DATE     DS    ZL8'0'                                   *
*                                                                     *
*        SUGGESTED CALLING SYNTAX FOR COBOL CALLERS:                  *
*                                                                     *
*             01  ATOG-PARAMETERS.                                    *
*                 02  ANUM PIC 9(7) VALUE +2451544.                   *
*                 02  RC   PIC 9(1) VALUE 0.                          *
*                 02  DATE PIC 9(8) VALUE 0.                          *
*             CALL 'Y2KATOG' USING ATOG-PARAMETERS.                   *
*                                                                     *
*    3.  THE POSSIBLE VALUES FOR THE RETURN CODE FIELD ARE:           *
*                                                                     *
*        0 INDICATES SUCCESSFUL EXECUTION OF THE ROUTINE.             *
*                                                                     *
*        2 INDICATES INVALID DATA WAS FOUND IN THE ANUM FIELD.        *
*        INVALID DATA ARE DETERMINED IF THE FIELD'S LOW ORDER BYTE'S  *
*        ZONE CONTAINS AN INVALID SIGN, (NOT ONE OF X'C', X'D', OR    *
*        X'F'), OR IF THE PRECEDING BYTES' ZONES ARE OTHER THAN       *
*        X'F', OR IF ANY BYTE'S LOW ORDER NIBBLE CONTAINS A VALUE     *
*        GREATER THAN X'9'.                                           *
*                                                                     *
*        4 INDICATES THE VALUE OF THE ANUM SPECIFIED WAS NOT IN       *
*        THE RANGE SPECIFIED IN 1 (ABOVE).                            *
*                                                                     *
*    4.  UPON SUCCESSFUL EXECUTION, THE GREGORIAN DATE TO WHICH       *
*        THE ASTRONOMICAL NUMBER CORRESPONDS WILL BE PLACED IN        *
*        THE 3RD PARAMETER FIELD (DATE).  IF THE RETURN CODE IS       *
*        A NON-ZERO VALUE (UNSUCCESSFUL EXECUTION), THE DATE          *
*        FIELD WILL CONTAINS ZEROS.                                   *
*                                                                     *
* ******************************************************************* *
* ******************************************************************* *
         EJECT
Y2KATOG  CSECT
          PRINT NOGEN
         EYEC  'CONVERT ASTRO DATE TO GREGORIAN'
*
         SAVE  (14,12)                 SAVE CALLER'S REGISTERS
*
         LR    R12,R15                 LOAD BASE WITH ENTRY ADDRESS
         USING Y2KATOG,R12             ESTABLISH ADDRESSABILITY
*
         L     R11,0(,R1)              LOAD A(PARAMETERS)
         USING $PARMS,R11              ESTABLISH ADDRESSABILITY
*
         GETMAIN R,LV=$DYNLEN          GETMAIN DYNAMIC WORKAREA
         LR    R10,R1                  SAVE A(MEMORY)
*
         ST    R13,4(,R10)             STORE A(CALLER'S SAVE AREA)
         ST    R10,8(,R13)             BACK CHAIN A(MY SAVE AREA)
         LR    R13,R10                 SET A(MY SAVE AREA)
         USING $DYNMEM,R13             ESTABLISH ADDRESSABILITY
*
*    INSERT EYECATCHER MARKS AT BEGIN/END OF GETMAIN'D AREA.
*
         MVC   TOPFLAG,=C'Y2KATOG GETMAIN BEGINS->'
         MVC   BOTFLAG,=C'<-Y2KATOG GETMAIN ENDS'
*
*    INITIALIZE RETURN CODE AND DATE PARAMETER FIELDS.
*
         MVI   PRC,C'0'                ASSUME GOOD RETURN
         MVC   PRC+1(8),PRC            NULL GREGORIAN DATE
*
*    TEST ANUM FOR INVALID CHARACTER
*
         LA    R2,PANUM                ADDRESS PASSED ANUM
         LA    R3,6                    LENGTH OF FIELD MINUS 1
P1VLOOP  CLI   0(R2),X'F0'             TEST LESS THAN C'0'
         BL    P1ERR1                  IF YES, ANUM CONTAINS BAD DATA
         CLI   0(R2),X'F9'             TEST GREATER THAN C'9'
         BH    P1ERR1                  IF YES, ANUM CONTAINS BAD DATA
         LA    R2,1(0,R2)              ADDRESS NEXT BYTE
         BCT   R3,P1VLOOP              CONTINUE TESTING
         IC    R3,0(,R2)               LOAD RIGHT-MOST CHARACTER
         LR    R4,R3                   COPY INTO R4
         N     R3,=F'15'               ISOLATE DIGIT PORTION
         CH    R3,=H'9'                TEST GREATER THAN 9
         BH    P1ERR1                  IF YES, ANUM CONTAINS BAD DATA
         SRL   R4,4                    ISOLATE ZONE PORTION
         CH    R4,=H'12'               TEST FOR 'C' ZONE
         BE    P1OK1                   IF YES, ANUM IS VALID NUMERIC
         CH    R4,=H'13'               TEST FOR 'D' ZONE
         BE    P1OK1                   IF YES, ANUM IS VALID NUMERIC
         CH    R4,=H'15'               TEST FOR 'F' ZONE
         BE    P1OK1                   IF YES, ANUM IS VALID NUMERIC
*
*    ANUM CONTAINED AN INVALID CHARACTER
*
P1ERR1   MVI   PRC,C'2'                INDICATE BAD DATA
         B     RETURN                  AND RETURN TO CALLER
*
*    TEST ANUM FOR VALID RANGE
*
P1OK1    PACK  TA(8),PANUM(7)          PACK PASSED ANUM
         CP    TA(8),=P'2305814'       IS YEAR PRIOR TO 1601?
         BL    P1ERR2                  IF YES, YEAR NOT VALID
         CP    TA(8),=P'2962884'       IS YEAR AFTER 3399?
         BNH   P1OK2                   IF NOT, YEAR IS VALID
*
*    ANUM CONTAINED AN INVALID VALUE (OUT OF RANGE)
*
P1ERR2   MVI   PRC,C'4'                INDICATE BAD VALUE
         B     RETURN                  AND RETURN TO CALLER
*
*    CONVERT ANUM TO GREGORIAN DATE
*
P1OK2    MP    TA,=P'4'                MULTIPLY BY 4
         SP    TA,=P'6884477'          SUBTRACT 6,884,477
*
         ZAP   TY,TA                   GET TA RESULT
         DP    TY,=P'146097'           DIVIDE BY 146,097
         ZAP   TD,TY+4(4)              SAVE REMAINDER
         ZAP   TY,TY(4)                SHIFT QUOTIENT
         MP    TY,=P'100'              MULTIPLY BY 100
*
         DP    TD,=P'4'                DIVIDE BY 4
         ZAP   TD,TD(7)                SHIFT QUOTIENT
*
         ZAP   TA,TD                   GET TD RESULT
         MP    TA,=P'4'                MULTIPLY BY 4
         AP    TA,=P'3'                ADD 3
*
         ZAP   TX,TA                   GET TA RESULT
         DP    TX,=P'1461'             DIVIDE BY 1,461
         ZAP   TD,TX+5(3)              SAVE REMAINDER
         ZAP   TX,TX(5)                SHIFT QUOTIENT
         AP    TY,TX                   ADD TO PRIOR VALUE OF TY
*
         DP    TD,=P'4'                DIVIDE BY 4
         ZAP   TD,TD(7)                SHIFT QUOTIENT
         AP    TD,=P'1'                ADD 1
*
         ZAP   TA,TD                   GET PRIOR TD RESULT
         MP    TA,=P'5'                MULTIPLY BY 5
         SP    TA,=P'3'                SUBTRACT 3
*
         ZAP   TM,TA                   GET PRIOR TA RESULT
         DP    TM,=P'153'              DIVIDE BY 153
         ZAP   TD,TM+6(2)              SAVE REMAINDER
         ZAP   TM,TM(6)                SHIFT QUOTIENT
         AP    TM,=P'1'                ADD 1
*
         DP    TD,=P'5'                DIVIDE BY 5
         ZAP   TD,TD(7)                SHIFT QUOTIENT
         AP    TD,=P'1'                ADD 1
*
         ZAP   TMONTH,TM               TRUNCATE MONTH
         CP    TMONTH,=P'11'           IS MONTH LESS THAN 11?
         BL    COMP001                 YES
         SP    TMONTH,=P'10'           SUBTRACT 10
         B     COMP002                 CONTINUE
COMP001  AP    TMONTH,=P'2'            ADD 2
COMP002  ZAP   TDAY,TD                 TRUNCATE DAY
         DP    TM,=P'11'               DIVIDE TM BY 11
         ZAP   TYEAR,TM(6)             TRUNCATE QUOTIENT
         AP    TYEAR,TY                FINISH YEAR
*
         UNPK  PMONTH,TMONTH           UNPACK MONTH
         OI    PMONTH+1,X'F0'          CLEAR SIGN
         UNPK  PDAY,TDAY               UNPACK DAY
         OI    PDAY+1,X'F0'            CLEAR SIGN
         UNPK  PYEAR,TYEAR             UNPACK YEAR
         OI    PYEAR+3,X'F0'           CLEAR SIGN
*
*    RESTORE REGISTERS, FREE STORAGE, AND RETURN
*
RETURN   LR    R1,R13                  LOAD ADDRESS OF GETMAINED AREA
         L     R13,4(,R13)             RELOAD PREVIOUS SAVE AREA
         LA    R0,$DYNLEN              LOAD LENGTH OF GETMAINED AREA
         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED AREA
         RETURN (14,12),RC=0           RETURN TO CALLER WITH RC=0
*
         LTORG
         EJECT
* ******************************************************************* *
* ***************************** EQUATES ***************************** *
* ******************************************************************* *
         YREGS
* ******************************************************************* *
         EJECT
* ******************************************************************* *
* ***************************** DSECTS ****************************** *
* ******************************************************************* *
$DYNMEM  DSECT                         DYNAMICALLY ALLOCATED MEMORY
SAVEAREA DS    18F                     REGISTER SAVE AREA
TOPFLAG  DS    CL24                    EYECATCHER
TA       DS    PL8                     INTERMEDIATE ANSWER
TX       DS    PL8                     INTERMEDIATE ANSWER
TM       DS    PL8                     INTERMEDIATE ANSWER
TD       DS    PL8                     INTERMEDIATE ANSWER
TY       DS    PL8                     INTERMEDIATE ANSWER
TMONTH   DS    PL2                     CALCULATED GREGORIAN MONTH
TDAY     DS    PL2                     CALCULATED GREGORIAN DAY
TYEAR    DS    PL4                     CALCULATED GREGORIAN YEAR
BOTFLAG  DS    CL22                    EYECATCHER
*
$DYNLEN  EQU   (*-$DYNMEM)             LENGTH OF GETMAIN'D AREA
*
$PARMS   DSECT                         PARAMETERS FROM/TO CALLER
PANUM    DS    ZL7                     ASTRONOMICAL NUMBER
PRC      DS    ZL1                     RETURN CODE (0/2/4)
PDATE    DS    0ZL8                    EXPANDED DATE
PMONTH   DS    ZL2                       MONTH
PDAY     DS    ZL2                       DAY
PYEAR    DS    ZL4                       YEAR
* ******************************************************************* *
         END
